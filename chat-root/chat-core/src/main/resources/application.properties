server.port=6868

###############################        此配置文件引用的是sharding-jdbc 5.0.0           #################################

# 引入配置文件
spring.profiles.active=log
# 配置真实数据源
#spring.shardingsphere.datasource.names=db0,springboot1
spring.shardingsphere.datasource.names=db0,db1
#
## 配置第 1个数据源 注意数据源名称(hikari使用spring.*.jdbc-url)
spring.shardingsphere.datasource.db0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.db0.jdbc-url=jdbc:mysql://localhost:3306/db0?useUnicode=true&serverTimezone=Asia/Shanghai&characterEncoding=UTF-8&autoReconnect=true
#spring.shardingsphere.datasource.db0.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.db0.url=jdbc:mysql://localhost:3306/db_chat?useUnicode=true&serverTimezone=Asia/Shanghai&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&maxReconnects=15000
spring.shardingsphere.datasource.db0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db0.username=root
spring.shardingsphere.datasource.db0.password=
spring.shardingsphere.datasource.db0.maxPoolSize=50
spring.shardingsphere.datasource.db0.minPoolSize=50
spring.shardingsphere.datasource.db0.maintenanceIntervalMilliseconds=30000
spring.shardingsphere.datasource.db0.connectionTimeoutMilliseconds=30000
spring.shardingsphere.datasource.db0.idleTimeoutMilliseconds=60000
spring.shardingsphere.datasource.db0.maxLifetimeMilliseconds=1800000
#
## 配置第 2个数据源 注意数据源名称(hikari使用spring.*.jdbc-url)
spring.shardingsphere.datasource.db1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.db1.jdbc-url=jdbc:mysql://localhost:3306/db1?useUnicode=true&serverTimezone=Asia/Shanghai&characterEncoding=UTF-8&autoReconnect=true
spring.shardingsphere.datasource.db1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db1.username=root
spring.shardingsphere.datasource.db1.password=
spring.shardingsphere.datasource.db1.maxPoolSize=50
spring.shardingsphere.datasource.db1.minPoolSize=50
spring.shardingsphere.datasource.db1.maintenanceIntervalMilliseconds=30000
spring.shardingsphere.datasource.db1.connectionTimeoutMilliseconds=30000
spring.shardingsphere.datasource.db1.idleTimeoutMilliseconds=60000
spring.shardingsphere.datasource.db1.maxLifetimeMilliseconds=1800000

## focus_users分表设置
#spring.shardingsphere.sharding.tables.focus_users.actual-data-nodes=db0.focus_users_$->{0..2}
#spring.shardingsphere.sharding.tables.focus_users.table-strategy.inline.sharding-column=focus_id
#spring.shardingsphere.sharding.tables.focus_users.table-strategy.inline.algorithm-expression=focus_users_$->{focus_id % 3}
#spring.shardingsphere.sharding.tables.focus_users.key-generator.column=focus_id
## ID自动生成算法
#spring.shardingsphere.sharding.tables.focus_users.key-generator.type=SNOWFLAKE
#
## chat_log分表设置
#spring.shardingsphere.sharding.tables.chat_log.actual-data-nodes=db0.chat_log_$->{0..8}
#spring.shardingsphere.sharding.tables.chat_log.table-strategy.inline.sharding-column=chat_id
#spring.shardingsphere.sharding.tables.chat_log.table-strategy.inline.algorithm-expression=chat_log_$->{chat_id % 9}
#spring.shardingsphere.sharding.tables.chat_log.key-generator.column=chat_id
## ID自动生成算法
#spring.shardingsphere.sharding.tables.chat_log.key-generator.type=SNOWFLAKE


##分布式序列配置（该项为必需，不是很友好）
# 分布式序列算法配置
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=123

# 打印解释后的SQL语句
#spring.shardingsphere.props.sql-show=true
# 格式化SQL语句
spring.shardingsphere.props.sql-simple=true
# sharding jdbc 需要重新注入数据源，覆盖原本注入的数据源
spring.main.allow-bean-definition-overriding=true

# 分片规则配置

# chat_log分表策略
# 表达式 `ds_$->{0..1}`枚举的数据源为读写分离配置的逻辑数据源名称
spring.shardingsphere.rules.sharding.tables.chat_log.actual-data-nodes=db0.chat_log_$->{0..6}
# 用于单分片键的标准分片场景
spring.shardingsphere.rules.sharding.tables.chat_log.table-strategy.standard.sharding-column=chat_id
spring.shardingsphere.rules.sharding.tables.chat_log.table-strategy.standard.sharding-algorithm-name=chatlog-inline
# 分布式序列策略配置
spring.shardingsphere.rules.sharding.tables.chat_log.key-generate-strategy.column=chat_id
spring.shardingsphere.rules.sharding.tables.chat_log.key-generate-strategy.key-generator-name=snowflake
## 分片算法配置
#spring.shardingsphere.rules.sharding.sharding-algorithms.chatlog-inline.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.chatlog-inline.props.algorithm-expression=chat_log_$->{chat_id % 7}
# 自定义分片算法
spring.shardingsphere.rules.sharding.sharding-algorithms.chatlog-inline.type=CLASS_BASED
spring.shardingsphere.rules.sharding.sharding-algorithms.chatlog-inline.props.strategy=STANDARD
spring.shardingsphere.rules.sharding.sharding-algorithms.chatlog-inline.props.algorithmClassName=com.fangg.config.sharingshpere.TableShardingAlgorithm
# 数据加密配置
spring.shardingsphere.rules.encrypt.tables.chat_log.columns.content.cipher-column=content
spring.shardingsphere.rules.encrypt.tables.chat_log.columns.content.encryptor-name=pwd-encryptor
# 数据加密算法配置
spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.type=AES
spring.shardingsphere.rules.encrypt.encryptors.pwd-encryptor.props.aes-key-value=90+9AbL2oafW2S0/

# focus_users分表策略
# 表达式 `ds_$->{0..1}`枚举的数据源为读写分离配置的逻辑数据源名称
spring.shardingsphere.rules.sharding.tables.focus_users.actual-data-nodes=db0.focus_users_$->{0..2}
# 用于单分片键的标准分片场景
spring.shardingsphere.rules.sharding.tables.focus_users.table-strategy.standard.sharding-column=focus_id
spring.shardingsphere.rules.sharding.tables.focus_users.table-strategy.standard.sharding-algorithm-name=focus-users-inline
# 分布式序列策略配置
spring.shardingsphere.rules.sharding.tables.focus_users.key-generate-strategy.column=focus_id
spring.shardingsphere.rules.sharding.tables.focus_users.key-generate-strategy.key-generator-name=snowflake
## 分片算法配置
spring.shardingsphere.rules.sharding.sharding-algorithms.focus-users-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.focus-users-inline.props.algorithm-expression=focus_users_$->{focus_id % 3}

# daily_record分表策略
# 表达式 `ds_$->{0..1}`枚举的数据源为读写分离配置的逻辑数据源名称
spring.shardingsphere.rules.sharding.tables.daily_record.actual-data-nodes=db1.daily_record_$->{0..2}
# 用于单分片键的标准分片场景
spring.shardingsphere.rules.sharding.tables.daily_record.table-strategy.standard.sharding-column=record_id
spring.shardingsphere.rules.sharding.tables.daily_record.table-strategy.standard.sharding-algorithm-name=daily-record-inline
# 分布式序列策略配置
spring.shardingsphere.rules.sharding.tables.daily_record.key-generate-strategy.column=record_id
spring.shardingsphere.rules.sharding.tables.daily_record.key-generate-strategy.key-generator-name=snowflake
## 分片算法配置
spring.shardingsphere.rules.sharding.sharding-algorithms.daily-record-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.daily-record-inline.props.algorithm-expression=daily_record_$->{record_id % 3}
# 数据加密配置(日记内容太多，加密可能会影响查询性能)
spring.shardingsphere.rules.encrypt.tables.daily_record.columns.content.cipher-column=content
spring.shardingsphere.rules.encrypt.tables.daily_record.columns.content.encryptor-name=record-encryptor
# 数据加密算法配置
spring.shardingsphere.rules.encrypt.encryptors.record-encryptor.type=AES
spring.shardingsphere.rules.encrypt.encryptors.record-encryptor.props.aes-key-value=18+sGEVBd*/54SNv

# discuss_info分表策略
# 表达式 `ds_$->{0..1}`枚举的数据源为读写分离配置的逻辑数据源名称
spring.shardingsphere.rules.sharding.tables.discuss_info.actual-data-nodes=db1.discuss_info_$->{0..4}
# 用于单分片键的标准分片场景
spring.shardingsphere.rules.sharding.tables.discuss_info.table-strategy.standard.sharding-column=discuss_id
spring.shardingsphere.rules.sharding.tables.discuss_info.table-strategy.standard.sharding-algorithm-name=discuss-info-inline
# 分布式序列策略配置
spring.shardingsphere.rules.sharding.tables.discuss_info.key-generate-strategy.column=discuss_id
spring.shardingsphere.rules.sharding.tables.discuss_info.key-generate-strategy.key-generator-name=snowflake
## 分片算法配置
spring.shardingsphere.rules.sharding.sharding-algorithms.discuss-info-inline.type=INLINE
spring.shardingsphere.rules.sharding.sharding-algorithms.discuss-info-inline.props.algorithm-expression=discuss_info_$->{discuss_id % 5}
# 数据加密配置
spring.shardingsphere.rules.encrypt.tables.discuss_info.columns.content.cipher-column=content
spring.shardingsphere.rules.encrypt.tables.discuss_info.columns.content.encryptor-name=discuss-encryptor
# 数据加密算法配置
spring.shardingsphere.rules.encrypt.encryptors.discuss-encryptor.type=AES
spring.shardingsphere.rules.encrypt.encryptors.discuss-encryptor.props.aes-key-value=NdfOsd+/Rg6y78hd




## Mybatis
mybatis.mapper-locations=classpath:mybatis/**/*Mapper.xml
#\u5F00\u542F\u9A7C\u5CF0\u547D\u540D\u8F6C\u6362
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.check-config-location=true
mybatis.type-aliases-package=com.fangg.bean

#分页设置
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql




