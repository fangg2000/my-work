import jquery from '@/components/chat/jquery.min.js'

/* 来自网络kmh0228 */
/*
使用方法说明
	1.此插件纯原生js编写，使用时引入此collision.js即可。
	2.生成容器，假设现有一个id为container的盒子做容器。
		var oB=new BallBox(‘container’);
			注：容器必须是有宽高的定位元素。尽量不要有边线。
	3.生成小球
		var ball=new Ball();
	4.把小球放入容器
		oB.addBall(ball);
	5.调用容器的ballRun方法，让小球开始运动。注意：此运动是完全弹性碰撞，不会损失能量。
		oB.ballRun();
	over
	
	参数说明
		容器参数  new BallBox(‘container’，opts);
			opts:{width:num,height:num}//没有边线和padding的时候可不写。有的情况下需要把容器真实宽高填进去。
		小球参数 new Ball(opts);
			opts:{
				e:小球DOM元素/原生对象，可填入页面DOM，不写则生成新DIV DOM,
				b:小球半径 默认30;包含边
				c:小球背景颜色/图片， 默认'pink'
				borderWidth:边线宽度 默认0
				borderColor:边线颜色 默认#000
				x:小球中心点的横坐标 默认为半径
				y:小球中心点的纵坐标 默认为半径
				sx:小球在x轴方向速度每30ms，默认3
				sy:小球在y轴方向速度每30ms，默认3
				m:小球的质量，默认b/30;
				html:小球内部的内容，不填则不会改变DOM本身的内容。
				fontSize:字体大小，默认12;
				opa:小球透明度，默认1；
				callBack:function  碰撞时的回掉函数，参数为碰撞的总次数，方法中this指向此球对象
			}
		小球方法：
				setB(num)//重新设置小球半径
				setC(str);//重新设置小球背景颜色/图片
				setBorderWidth(n);//重新设置小球边线宽度
				setBorderColor(str);//重新设置边线颜色
				setM(n);//重设小球质量,如果不给参数，则按照半径重新默认质量
				setHTML(str);//重设小球内容
				setOpa(n);//重设小球透明度

 
 */


export function BallBox(a, b) {
	var c = this.container = document.getElementById(a);
	var b = this.opts = b || {};
	this.width = b.width || c.offsetWidth;
	this.height = b.height || c.offsetHeight;
	this.child = []
}
BallBox.prototype.addBall = function(a) {
	this.child.push(a);
	if (a.e.parentNode != this.container) {
		this.container.appendChild(a.e)
	}
};
BallBox.prototype.ballRun = function() {
	clearInterval(this.ballRunTimer);
	var g = this;
	var w = this.width;
	var h = this.height;
	var k = this.isColl;
	var l = this.coll;
	this.ballRunTimer = setInterval(function() {
		var a = g.child;
		var c = a.length;
		for (var i = 0; i < c; i++) {
			a[i].foot()
		}
		for (var i = 0; i < c; i++) {
			var d = a[i];
			var b = d.b;

			// 判断是否移动了位置
			/* if (d.px) {
				d.x = d.px
				d.px = null
				console.log('新x位置--', d.x +'/'+ d.px);
			}
			if (d.py) {
				d.y = d.py
				d.py = null
				console.log('新y位置--', d.y +'/'+ d.py);
			} */ 

			// 小球的X坐标在最左边
			if (d.x < 0) {
				// 设置为在最右边
				d.x = w ;
			}
			if (d.y < b) {
				d.y = b;
				d.sy *= -1
			}
			var e = w - b;
			// 小球的X坐标在最右边
			if (d.x > w) {
				// 设置为在最左边
				d.x = 1;
			}
			var f = h - b;
			if (d.y > f) {
				d.y = f;
				d.sy *= -1
			}
		}
		for (var i = 0; i < c; i++) {
			for (var j = i + 1; j < c; j++) {
				if (k(a[i], a[j])) {
					l(a[i], a[j]);
					a[i].collNum++;
					a[i].callBack(a[i].collNum);
					a[j].collNum++;
					a[j].callBack(a[j].collNum)
				}
			}
		}
	}, 30)
};
BallBox.prototype.ballStop = function() {
	clearInterval(this.ballRunTimer)
};
BallBox.prototype.coll = function(a, b) {
	var c = b.x - a.x;
	var d = b.y - a.y;
	var e = b.sx - a.sx;
	var f = b.sy - a.sy;
	var g = Math.atan2(f, e);
	var h = Math.atan2(-d, -c);
	var i = Math.abs(h - g);
	var D = Math.PI / 2;
	if (i <= 3 * D && i >= D) return;
	var j = a.m || 1;
	var k = b.m || 1;
	var l = j + k;
	var m = ((j - k) * a.sx + 2 * k * b.sx) / l;
	var n = ((k - j) * b.sx + 2 * j * a.sx) / l;
	var o = ((j - k) * a.sy + 2 * k * b.sy) / l;
	var p = ((k - j) * b.sy + 2 * j * a.sy) / l;
	a.sx = (c > 0)?-m:m;
	b.sx = (c > 0)?n:-n;
	a.sy=o;
	b.sy=p
};
BallBox.prototype.isColl = function(a, b) {
	if (a.stopfoot || b.stopfoot) return false;
	var d = Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2);
	var c = Math.pow(a.b + b.b, 2);
	return d < c
};

export function Ball(a) {
	var a = this.json = a || {};
	var d = this.type = a.type || 'ball';
	var b = this.b = a.b || 30;
	var f = this.borderWidth = a.borderWidth || 0;
	var g = this.borderColor = a.borderColor || '#000';
	var x = this.x = a.x || b;
	var y = this.y = a.y || b;
	var h = this.sx = a.sx || 3;
	var i = this.sy = a.sy || 3;
	var m = this.m = a.m || (b / 30);
	var c = this.c = a.c || 'pink';
	var e = this.e = a.e || document.createElement('div');
	var j = this.html = a.html;
	var k = this.opa = a.opa || 1;
	var l = this.fontSize = a.fontSize || 12;
	var cls = this.cls = a.cls;
	var bs = this.bs = a.bs;
	var fun = this.fun = a.fun;
	var ages = this.ages = a.ages;
	var pp = this.pp = a.pp;
	var lu = this.lu = a.lu;
	var n = this.callBack = a.callBack || function() {};
	var mf = this.moreCallBack = a.moreCallBack || function() {};
	var ef = this.enterCallBack = a.enterCallBack || function() {};
	this.collNum = 0;
	this.initStyle();
	this.addEvent()
}

// 泡泡球样式
Ball.prototype.initStyle = function() {
	var b = this.b;
	var s = this.e.style;
	let wh = (b - this.borderWidth) * 2;
	s.position = 'absolute';
	s.top = s.left = 0;
	s.width = s.height = wh + 'px';
	s.border = this.borderWidth + 'px solid ' + this.borderColor;
	s.borderRadius = '50%';

	//s.animation = 'ballkling 3s infinite ease-in-out';
	//s.animationName = 'ballkling';
	//s.animationDuration = '3s';
	//s.animationIterationCount = 'infinite';
	//s.animationTimingFunction = 'ease-in-out';
	//s.animationDirection = 'alternate';
	let myFun = this.fun;
	let ages = this.ages;
	let view = this
	this.e.setAttribute("class", this.cls); 
	this.e.setAttribute("id", ("bb_"+ages.userCode)); 
	// 球体拖动
	this.e.setAttribute("draggable", true); 
	// 绑定onclick事件
	this.e["ondblclick"] = ball_c => myFun(view, ages);
	s.zIndex = 96;

	// 头像
	// 头像img
	var pp_img = document.createElement("img");
	pp_img.style.width = wh + 'px'
	pp_img.style.height = wh + 'px'
	pp_img.style.borderRadius = '50%';
	pp_img.style.opacity = 0;
	pp_img.setAttribute('draggable', false)
	pp_img.setAttribute('class', 'pp-'+ages.userCode)
	//s.boxShadow = '0 6px 15px rgba(0,0,0,2),inset 0 5px 10px 5px rgba(255,255,255,1)';
	this.e.appendChild(pp_img);

	if (this.pp != '') {
		// console.log('用户头像--', this.pp);
		/* var image = new Image();  
		// 设置图片跨域访问
    // image.setAttribute('crossOrigin', 'anonymous');
		image.crossOrigin = "Anonymous";
		image.src = this.pp;  
		image.onload = function(){  
			var base64 = getBase64Image(image);  
			console.log(base64);  
			// s.backgroundImage = 'url(\"'+getBase64Image(img)+'\") no-repeat'
		}  */ 
    pp_img.src = this.pp
		pp_img.style.opacity = 1;

		// 禁止图片拖动
		// this.e.setAttribute('draggable', false)
		// 图片边缘虚化处理
		loadStyleString(".pp-"+ages.userCode+":after{position: absolute;content: '';width: 100%;height: 100%;top: 0;left: 0;"
			+"border-radius: 50%;box-shadow:0 0 1px 1px "+this.c+" inset;}");
		
		s.boxShadow = '0 6px 15px 0'+this.c+',inset 0 5px 10px 5px rgba(255,255,255,1)'
	} else {
		s.opacity = this.opa;
		s.background = this.c;
		s.backgroundSize = 'cover';
		//s.boxShadow = '0 6px 15px rgba(0,0,0,2),inset 0 5px 10px 5px rgba(255,255,255,1)';
		s.boxShadow = this.bs;

		// 泡泡球为客服
		if (ages.userType == 0) {
			pp_img.src = '/static/img/user/cs.jpg'
			pp_img.style.opacity = 1;
		}
	}

	if (this.html) {
		this.e.innerHTML = this.e.innerHTML + this.html;
		s.textAlign = 'center';
		//s.lineHeight = (b - this.borderWidth) * 2 + 'px';
		s.fontSize = this.fontSize + 'px';
		
		// 设置名字显示位置
		let b = this.b
		setTimeout(() => {
			// 名字宽度
			let n_width = parseInt($('#msg_name_'+ages.userCode).css('width').replace('px',''), 10)/2
			// 名字左移居中
			let n_left = (wh/2) - n_width
			$('#msg_name_'+ages.userCode).css({position: 'relative', top: (b-30)+'px', left: n_left, fontWeight: 'bolder'})
		}, 100);
	}
	this.setPos()

	// 泡泡球拖动
	dragElement(this.e);

	/* function getBase64Image(img) {  
		var canvas = document.createElement("canvas");  
		canvas.width = img.width;  
		canvas.height = img.height;  
		var ctx = canvas.getContext("2d");  
		ctx.drawImage(img, 0, 0, img.width, img.height);  
		var ext = img.src.substring(img.src.lastIndexOf(".")+1).toLowerCase();  
		var dataURL = canvas.toDataURL("image/"+ext);  
		return dataURL;  
	}  */

	function loadStyleString(css) {
		var style = document.createElement("style");
		try {
				style.appendChild(document.createTextNode(css));
		} catch(ex) {
				style.styleSheet.cssText = css;
		}
		var head = document.getElementsByTagName('head')[0];
		head.appendChild(style);
	}

	function dragElement(elmnt) {
		var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
		elmnt.onmousedown = dragMouseDown;

		function dragMouseDown(e) {
			e = e || window.event;
			// get the mouse cursor position at startup:
			pos3 = e.clientX;
			pos4 = e.clientY;
			// console.log('拖动开始--', posX+'/'+posY);
		}
		
		// 当拖完p元素输出一些文本元素和重置透明度
		elmnt.addEventListener("dragend", function(e) {
			e = e || window.event;
			// console.log('拖动结束--', e.clientX+'/'+e.clientY);
			
			// calculate the new cursor position:
			pos1 = pos3 - e.clientX;
			pos2 = pos4 - e.clientY;
			// set the element's new position:
			elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
			elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
			  
			// 判断球体移动位置
			view.px = e.clientX
			view.py = e.clientY
			// console.log('拖动结束--', view.px+'/'+view.py);
		});
	}
};
Ball.prototype.addEvent = function() {
	var a = this;
	this.e.onmouseenter = function(e) {
		a.stopFoot()

		// 加载群成员数据
		a.enterCallBack(e)

		let pageX = e.pageX;
    let pageY = e.pageY;
		// console.log(pageX,"/", pageY, JSON.stringify(a.ages));

		var bbPopoer = document.getElementById('bbPopoer'); 
		bbPopoer.style.display = "block";
		//鼠标目前在X轴上的位置，加10是为了向右边移动10个px方便看到内容    
		bbPopoer.style.left = pageX; 
		bbPopoer.style.top = pageY;    

		let content = ''
		let left_flag = true
		if (a.ages.content) {
			let in_style = '<div style="max-height:220px;overflow-y:auto;max-width:650px;width:auto;display:inline-block !important; display:inline;text-align:left;margin-right:15px;box-shadow: -3px 3px 5px #E2E0ED;padding: 5px 10px 15px 10px;border: 1px solid #E2E0ED;border-top: 5px solid red;border-radius: 0 25px 0 25px;">'
			let out_style = '<div style="max-height:220px;overflow-y:auto;max-width:650px;width:auto;display:inline-block !important; display:inline;text-align:left;margin-left:7px;box-shadow: 3px 3px 5px #E2E0ED;padding: 5px 10px 15px 10px;border: 1px solid #E2E0ED;border-top: 5px solid #00ff00;border-radius: 25px 0 25px 0;">' 
			if (a.ages.server) {
				// 群/房间
				if (a.ages.userType == 2 || a.ages.userType == 3) {
					// console.log('群成员数据--', JSON.stringify(a.cgu));
					
					if (a.ages.client == a.lu.userCode) {
						content = out_style + a.ages.content + '</div>'
						left_flag = false
					} else {
						let result_name = '匿名用户'
						if (a.cgu && a.cgu['cguList']) {
							let cgu_list = a.cgu['cguList']
							cgu_list.forEach(item => {
								if (item && item.userCode == a.ages.client) {
									result_name = item.username
								}
							});
						}
						// 加上用户名称
						let group_nstyle = '<label style="font-size: 12px;color: #C0C4CC;margin-left:35px;">(来自--'+result_name+')</label>'
						content = in_style + a.ages.content + group_nstyle + '</div>'
					}
				} 
				// 泡泡球为客服
				else if (a.ages.userType == 0) {
					if (a.ages.type === '0') {
						content = in_style + a.ages.content + '</div>'
					} else {
						content = out_style + a.ages.content + '</div>'
						left_flag = false
					}
				} 
				// 登录人为客服
				else if (a.lu.userType == 0) {
					if (a.ages.type === '1') {
						content = in_style + a.ages.content + '</div>'
					} else {
						content = out_style + a.ages.content + '</div>'
						left_flag = false
					}
				} else {
					if (a.ages.userCode == a.ages.server && a.ages.type === '1') {
						content = in_style + a.ages.content + '</div>'
					} else if (a.ages.userCode == a.ages.client && a.ages.type === '0') {
						content = in_style + a.ages.content + '</div>'
					} else {
						content = out_style + a.ages.content + '</div>'
						left_flag = false
					}
				}
			} else {
				content = in_style + a.ages.content + '</div>'
			}
		}

		let elPopper = $('#bbPopoer').children('.el-popper')

		// 判断是否为同一人
		let m_write = elPopper.find('.input-w-message')
		if (m_write.attr('id') != a.ages.userCode) {
			elPopper.find('#moreInfoList').html('')
			m_write.val('')
			a.moreCallBack(a.ages)
		}

		elPopper.css({'display':'block', 'top': pageY, 'left': pageX, 'border-top': '15px solid '+a.ages.color})
		elPopper.find('#bb_info').attr('class', left_flag?'bb-info':'bb-info bb-info-right').html(content)
		elPopper.find('.input-w-message').attr('id', a.ages.userCode).attr('data-code', a.ages.userCode)
		elPopper.find('#send_btn').hover(function(){
			// 按钮改变颜色深度
			let color = $(this).css("background-color");
			color = color.replace(/[^0-9,]+/g,"");
			let red = parseInt(color.split(",")[0], 10);
			let gre = parseInt(color.split(",")[1], 10);
			let blu = parseInt(color.split(",")[2], 10);
			let add_num = 120
			let min_color = red>gre?(gre>blu?blu:gre):(red>blu?blu:red)
			let color_json = {
				red: red==min_color?(red+add_num):red,
				gre: gre==min_color?(gre+add_num):gre,
				blu: blu==min_color?(blu+add_num):blu
			}
			$(this).css("background-color", ("rgb(" + color_json.red + "," + color_json.gre + "," + color_json.blu + ")"));
		}).mouseleave(function(){
			$(this).css("background-color", a.ages.color);
		}).css({'background-color': a.ages.color});

		// 滚动条颜色
		// elPopper.find('.sc2').css({"-webkit-scrollbar-thumb" : "background-color("+a.ages.color+")"});

	};

	/* this.e.onmouseout = function() {
		a.startFoot()
	}; */

	//双击事件
	this.e.addEventListener('dblclick',function(){
		a.startFoot()
		
		// var bbPopoer = document.getElementById('bbPopoer'); 
		// bbPopoer.style.display = "none";
		$('#bbPopoer').css({'display':'none'})
	}, false);

	$('#cancel_btn').click(function (params) {
		$('#bbPopoer').css({'display':'none'})
	});

	$('#cancel_ball').click(function (params) {
		$('#bbPopoer').css({'display':'none'})
	});

};
Ball.prototype.foot = function(n) {
	if (this.stopfoot) return;
	var n = n || 1;
	this.x += this.sx * n;
	this.y += this.sy * n;
	this.setPos()
};
Ball.prototype.startFoot = function() {
	this.stopfoot = false;
	this.e.style.zIndex = 96
};
Ball.prototype.stopFoot = function() {
	this.stopfoot = true;
	this.e.style.zIndex = 97
};
Ball.prototype.setPos = function() {
	var b = this.b;
	var x = parseInt(this.x - b);
	var y = parseInt(this.y - b);
	this.e.style.transform = 'translate(' + x + 'px,' + y + 'px)';
	this.e.style.webkitTransform = 'translate(' + x + 'px,' + y + 'px)'
};
Ball.prototype.setB = function(n) {
	var b = this.b = n;
	var s = this.e.style;
	s.width = s.height = (b - this.borderWidth) * 2 + 'px';
	s.lineHeight = (b - this.borderWidth) * 2 + 'px';
	this.setPos()
};
Ball.prototype.setC = function(a) {
	var c = this.c = a;
	this.e.style.background = c;
	this.e.style.backgroundSize = 'cover'
};
Ball.prototype.setBS = function(m) {
	var n = this.bs = m;
	this.e.style.boxShadow = n;
};
Ball.prototype.setBorderWidth = function(n) {
	var n = this.borderWidth = n;
	var s = this.e.style;
	s.width = s.height = (this.b - n) * 2 + 'px';
	s.lineHeight = (this.b - n) * 2 + 'px';
	s.border = n + 'px solid ' + this.borderColor
};
Ball.prototype.setBorderColor = function(a) {
	var a = this.borderColor = a;
	this.e.style.border = this.borderWidth + 'px solid ' + a
};
Ball.prototype.setM = function(n) {
	this.m = n || this.b / 30
};
Ball.prototype.setHTML = function(a) {
	var b = this.html = a;
	var s = this.e.style;
	this.e.innerHTML = b;
	s.textAlign = 'center';
	s.lineHeight = (this.b - this.borderWidth) * 2 + 'px';
	s.fontSize = this.fontSize + 'px';
};
Ball.prototype.setOpa = function(n) {
	var a = this.opa = n;
	this.e.style.opacity = n
};
Ball.prototype.setCGU = function(cgu_data) {
	console.log('设置群成员数据--', cgu_data);
	var cgu = this.cgu = cgu_data
};
Ball.prototype.closeMsg = function() {
	$('#cancel_btn').trigger('click')
};

/* export default {
	BallBox, 
	Ball
} */